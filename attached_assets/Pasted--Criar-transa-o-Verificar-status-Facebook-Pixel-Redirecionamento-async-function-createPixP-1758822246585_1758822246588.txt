// Criar transação + Verificar status + Facebook Pixel + Redirecionamento

async function createPixPaymentComplete(paymentData) {
  try {
    // 1. CRIAÇÃO DA TRANSAÇÃO
    console.log('Criando transação PIX...');
    
    const response = await fetch('https://app.4mpagamentos.com/api/v1/payments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer 3mpag_kdnf2w9jq_mfagk31e'
      },
      body: JSON.stringify(paymentData)
    });
    
    if (!response.ok) {
      throw new Error('Erro ao criar pagamento');
    }
    
    const transaction = await response.json();
    console.log('Transação criada:', transaction);
    
    // 2. VERIFICAÇÃO DE STATUS (A CADA 5 SEGUNDOS) ✅ RECOMENDADO
    const checkStatus = async () => {
      const statusResponse = await fetch(`https://app.4mpagamentos.com/api/v1/payments/${transaction.transaction_id}`);
      
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        
        if (statusData.status === 'paid') {
          console.log('PAGAMENTO CONFIRMADO!');
          // Dispara Facebook Pixel
          trackPurchase(statusData.transaction_id, statusData.amount, 'BRL', 'Produto PIX Gateway');
          // Redireciona cliente
          setTimeout(() => handleRedirect(), 1000);
          return statusData;
        } else if (statusData.status !== 'pending') {
          return statusData; // Para o loop
        }
      }
      
      setTimeout(checkStatus, 5000); // ✅ 5 segundos - RECOMENDADO
    };
    
    checkStatus(); // Inicia verificação
    return transaction;
    
  } catch (error) {
    console.error('Erro:', error);
    throw error;
  }
}

// FACEBOOK PIXEL TRACKING
function trackPurchase(transactionId, amount, currency, productName) {
  // Verificar duplicata
  const conversionKey = `fb_conversion_${transactionId}`;
  if (localStorage.getItem(conversionKey)) {
    return false;
  }
  
  // Verificar se Facebook Pixel existe
  if (typeof window.fbq === 'undefined') {
    return false;
  }
  
  // Dados do evento
  const eventData = {
    value: amount,
    currency: currency,
    content_name: productName,
    content_type: 'product',
    content_ids: [transactionId],
    transaction_id: transactionId
  };
  
  // ENVIAR EVENTO PURCHASE
  window.fbq('track', 'Purchase', eventData);
  
  // Marcar como enviado
  localStorage.setItem(conversionKey, new Date().toISOString());
  
  return true;

// REDIRECIONAMENTO AUTOMÁTICO
function handleRedirect() {
  const redirectUrl = '/treinamento';
  console.log('Redirecionando para:', redirectUrl);
  
  // Se for URL completa, redireciona
  if (redirectUrl.startsWith('http')) {
    window.location.href = redirectUrl;
  } else {
    // Se for slug/path relativo
    window.location.href = window.location.origin + '' + redirectUrl;
  }
}

// EXEMPLOS DE USO

// EXEMPLO 1: API DIRETA (usa suas configurações GLOBAIS)
const paymentDataDirect = {
  amount: 100.50,
  customer_name: "João Silva",
  customer_email: "joao@exemplo.com",
  customer_cpf: "12345678901",
  customer_phone: "11999887766",
  description: "Pagamento via API direta"
  // SEM product_id = usa configurações globais (Pixel: 1107141054948471, Redirect: /treinamento)
};

// EXEMPLO 2: PRODUTO ESPECÍFICO (usa configurações do PRODUTO)
const paymentDataProduct = {
  amount: 100.50,
  customer_name: "João Silva",
  customer_email: "joao@exemplo.com",
  customer_cpf: "12345678901",
  customer_phone: "11999887766",
  description: "Produto específico",
  product_id: 123 // ← COM product_id = usa configurações específicas deste produto
};

createPixPaymentComplete(paymentDataDirect) // ou paymentDataProduct
  .then(transaction => {
    console.log('Processo iniciado para transação:', transaction.transaction_id);
    // Aqui você pode mostrar o QR Code: transaction.pixQrCode
  })
  .catch(error => {
    console.error('Erro no processo:', error);
  });